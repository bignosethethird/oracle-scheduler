create or replace package scheduler.scheduler_gui
as
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- GUI abstraction to the Task Scheduler
-- DO NOT BEAUTIFY THIS CODE!!!!!!!
-------------------------------------------------------------------------------

--===========================================================================--
-- GLOBAL SYSTEM-WIDE CONSTANTS
--===========================================================================--
pc_package                  constant varchar2(30):=  'scheduler_gui';
pc_schema                   constant varchar2(30):=  'scheduler';

--===========================================================================--
-- PRIVATE FUNCTIONS
--===========================================================================--
-- Calculates the as-of date for the value displayed in the offset field
-- in the date display format
function calc_as_of_date(p_task_id in schedules.task_id%type) return varchar2;


--===========================================================================--
-- Scheduler Control
--===========================================================================--
-- Scheduler Startup, shutdown, abort, resume etc...
-- Thows:   * Illegal botton click
procedure scheduler_startup;
procedure scheduler_shutdown;
procedure scheduler_resume;
procedure scheduler_suspend;
procedure scheduler_abort;

-- Returns the following and should be displayed with the corresponding colour.
function get_scheduler_mode return varchar2;

--===========================================================================--
-- QUERY TASKS
--===========================================================================--

-- General Task query for the given search criteria
--- group name
--  state
-- Description is a wild-card string. NULL --> no constraint
-- Command is a wild-card string. NULL--> no contraint
-- dependency is a wild-card string. NULL--> no contraint
-- Returns:   
--  task_id        (should be hidden)
--  group_name
--  operation_id
--  task_type
--  description (limited to 30 chars)
--  current state
--  when last changed
--  next due for execution
--  command
--  dependencies
-- ordered by next due date
function get_tasks_list(
  p_description in  schedules.description%type :=null,
  p_command     in  schedules.command%type     :=null,
  p_group_name  in  varchar2                   :=null,
  p_state       in  varchar2                   :=null,
  p_dependency  in  varchar2                   :=null
  ) return utl.global.t_result_set;
function get_tasks_count(
 p_description in  schedules.description%type :=null,
  p_command     in  schedules.command%type     :=null,
  p_group_name  in  varchar2                   :=null,
  p_state       in  varchar2                   :=null,
  p_dependency  in  varchar2                   :=null
) return pls_integer;

-- Populates a Picklist for possible task states
-- Returns:   A resultset containig all the possible states that a task can be in
-- Called     * On initial opening of the browse screen
function get_states_list  return utl.global.t_result_set;
function get_states_count return pls_integer;

-- Populates a Picklist for all the existing groups
-- Returns:   A resultset containig all the currently used groups in the scheduler
-- Called:    On initial opening of the browse screen
function get_groups_list  return utl.global.t_result_set;
function get_groups_count return pls_integer;

-- Get all task details as per table design
-- Returns 1 or 0 records
-- Called:    On Details botton click on Browse screen
function get_task_details_list (p_task_id in schedules.task_id%type) return utl.global.t_result_set;
function get_task_details_count(p_task_id in schedules.task_id%type) return pls_integer;

-- Get task explanation
function task_explain(p_task_id in schedules.task_id%type) return varchar2;

-- Get task state
function get_task_state(p_task_id in schedules.task_id%type) return varchar2;

--===========================================================================--
-- TASK OPERATIONS
--===========================================================================--

-- Delete the task.
-- Parameters:  Primary Key Task Id
--              Comma-separated string of Task Id's if multiple tasks selected.
-- Returns:     A non-success return code means that it was impossible
--              to remove the task from the schedule
function task_delete (p_task_id in schedules.task_id%type) return utl.global.t_error_code;
function task_delete (p_task_ids in varchar2) return utl.global.t_error_code;

-- Forwards the selected task
-- Parameters:  Primary Key Task Id
procedure task_forward(p_task_id in schedules.task_id%type);

-- Resets the selected task
-- Parameters:  Primary Key Task Id
procedure task_reset(p_task_id in schedules.task_id%type);

-------------------------------------------------------------------------------
-- Runs the selected task now
--
-- Parameters:  Primary Key Task Id
--              Comma-separated string of Task Id's if multiple tasks selected.
procedure task_run_now(p_task_id in schedules.task_id%type);
procedure task_run_now(p_task_ids in varchar2);

-------------------------------------------------------------------------------
-- Aborts the selected task
--
-- Parameters:  Primary Key Task Id
procedure task_abort(p_task_id in schedules.task_id%type);

--===========================================================================--
-- Lauch Log
--===========================================================================--

-- Get all task launches for set of constraints orderd by start date descending
-- Returns a resultset with the following collumns:
-- task id
-- group_name
-- operation_id
-- description (limited to 30 chars)
-- exit task state
-- time started
-- time completed
-- return code
function get_lauch_log_list(
  p_state in  schedules.state%type:=null,
  p_from  in  date:=null,
  p_to    in  date:=null
  ) return utl.global.t_result_set;
function get_launch_log_count(
  p_state in  schedules.state%type:=null,
  p_from  in  date:=null,
  p_to    in  date:=null
) return pls_integer;

--===========================================================================--
-- TASK EDIT
--===========================================================================--

-- Editing logic
-- Parameters:  Primary Key Task Id
-- Returns:     0       success, OK to proceed.
--              -20920  gc_scheduler_task_edit_lock:
function is_task_editable(p_task_id in schedules.task_id%type) return utl.global.t_error_code;
function is_task_edited_by_me return boolean;

function task_edit(
  p_task_id           in schedules.task_id%type,
  p_submitted_by      in schedules.submitted_by%type:=null,
  p_task_type         in schedules.task_type%type:=null,
  p_task_priority     in schedules.task_priority%type:=null,
  p_task_peers        in varchar2:=null,
  p_group_name        in schedules.group_name%type:=null,
  p_group_priority    in task_groups.group_priority%type:=null,
  p_operation_id      in schedules.operation_id%type:=null,
  p_command           in schedules.command%type:=null,
  p_command_type      in schedules.command_type%type:=null,
  p_description       in schedules.description%type:=null,
  p_dependencies      in schedules.dependencies%type:=null,
  p_max_waittime      in schedules.max_waittime%type:=null,
  p_max_runtime       in schedules.max_runtime%type:=null,
  p_year              in schedules.year%type:=null,
  p_month             in schedules.month%type:=null,
  p_day               in schedules.day%type:=null,
  p_hour              in schedules.hour%type:=null,
  p_minute            in schedules.minute%type:=null,
  p_weekdays          in schedules.weekdays%type:=null,
  p_special_days      in schedules.special_days%type:=null,
  p_next_due_date     in schedules.next_due_date%type:=null,
  p_repeats           in schedules.repeats%type:=null,
  p_repeat_interval   in schedules.repeat_interval%type:=null,
  p_repeat_periodic   in schedules.repeat_periodic%type:=null,
  p_effective_date_offset in schedules.effective_date_offset%type:=null,
  p_modal             in schedules.modal%type:=null,
  p_ignore_error      in schedules.ignore_error%type:=null,
  p_change_reason     in schedules.change_reason%type:=null  
) return utl.global.t_error_code;

-- Commit editing changes and complete editing operation
function task_commit return utl.global.t_error_code;

-- Cancel all editing changes
function task_cancel return utl.global.t_error_code;

-- Adds a new task to the schedule
-- The task Id is internally generated.
function task_add(
  p_submitted_by      in schedules.submitted_by%type:=null,
  p_task_type         in schedules.task_type%type:=null,
  p_task_priority     in schedules.task_priority%type:=null,
  p_task_peers        in varchar2:=null,
  p_group_name        in schedules.group_name%type:=null,
  p_group_priority    in task_groups.group_priority%type:=null,
  p_operation_id      in schedules.operation_id%type:=null,
  p_command           in schedules.command%type:=null,
  p_command_type      in schedules.command_type%type:=null,
  p_description       in schedules.description%type:=null,
  p_dependencies      in schedules.dependencies%type:=null,
  p_max_waittime      in schedules.max_waittime%type:=null,
  p_max_runtime       in schedules.max_runtime%type:=null,
  p_year              in schedules.year%type:=null,
  p_month             in schedules.month%type:=null,
  p_day               in schedules.day%type:=null,
  p_hour              in schedules.hour%type:=null,
  p_minute            in schedules.minute%type:=null,
  p_weekdays          in schedules.weekdays%type:=null,
  p_special_days      in schedules.special_days%type:=null,
  p_next_due_date     in schedules.next_due_date%type:=null,
  p_repeats           in schedules.repeats%type:=null,
  p_repeat_interval   in schedules.repeat_interval%type:=null,
  p_repeat_periodic   in schedules.repeat_periodic%type:=null,  
  p_effective_date_offset in schedules.effective_date_offset%type:=null,
  p_modal             in schedules.modal%type:=null,
  p_ignore_error      in schedules.ignore_error%type:=null,
  p_change_reason     in schedules.change_reason%type:=null  
) return pls_integer;

-- Alters and commits all changes to an existing task
-- This approach does an edit and commit all in one operation
function alter_task(
  p_task_id           in schedules.task_id%type,
  p_submitted_by      in schedules.submitted_by%type:=null,
  p_task_type         in schedules.task_type%type:=null,
  p_task_priority     in schedules.task_priority%type:=null,
  p_task_peers        in varchar2:=null,
  p_group_name        in schedules.group_name%type:=null,
  p_group_priority    in task_groups.group_priority%type:=null,
  p_operation_id      in schedules.operation_id%type:=null,
  p_command           in schedules.command%type:=null,
  p_command_type      in schedules.command_type%type:=null,
  p_description       in schedules.description%type:=null,
  p_dependencies      in schedules.dependencies%type:=null,
  p_max_waittime      in schedules.max_waittime%type:=null,
  p_max_runtime       in schedules.max_runtime%type:=null,
  p_year              in schedules.year%type:=null,
  p_month             in schedules.month%type:=null,
  p_day               in schedules.day%type:=null,
  p_hour              in schedules.hour%type:=null,
  p_minute            in schedules.minute%type:=null,
  p_weekdays          in schedules.weekdays%type:=null,
  p_special_days      in schedules.special_days%type:=null,
  p_next_due_date     in schedules.next_due_date%type:=null,
  p_repeats           in schedules.repeats%type:=null,
  p_repeat_interval   in schedules.repeat_interval%type:=null,
  p_repeat_periodic   in schedules.repeat_periodic%type:=null,  
  p_effective_date_offset in schedules.effective_date_offset%type:=null,
  p_modal             in schedules.modal%type:=null,
  p_ignore_error      in schedules.ignore_error%type:=null,
  p_change_reason     in schedules.change_reason%type:=null
) return pls_integer;

--===========================================================================--
-- VCR-specific User Interface
--===========================================================================--

-- Populates a Picklist for all unloaded data files that match a file spec
-- Returns:   A resultset containig all unloaded data files
-- Called     * On initial opening of the browse screen
function get_data_files_list (p_file_spec in varchar2:=null) return utl.global.t_result_set;
function get_data_files_count(p_file_spec in varchar2:=null) return pls_integer;
function get_data_file_table (p_file_spec in varchar2) return utl.t_varchar2;
-- create and schedule one-off task to load a file or files on a adhoc basis
-- This creates 4 specific tasks that together perform an ad-hoc load.
-- Each  task is dependent on the other.
--
-- TODO: Needs transactioning - if one task creation fails, all newly-created tasks should be rolled back.
--       Can't use SAVEPOINT since currently-used edit procedures are autonomous.
--       Enhance editing procedures maybe?
--
-- Parameters:
-- p_type (1 default, 2 version over-ride, 3 specific file(s)
-- p_source_name mandatory
-- p_as_of_date  mandatory
-- p_basis       mandatory
-- p_version     mandatory for type 2
-- p_file        mandatory for type 3
-- p_source_file_type mandatory for type 3
--
-- Returns: any error code explicitly trapped during the process or success
function schedule_adhoc_file_load( p_type             in integer,
                                   p_source_name      in varchar2,
                                   p_as_of_date       in date,
                                   p_basis            in varchar2,
                                   p_version          in varchar2,
                                   p_file             in varchar2,
                                   p_source_file_type in varchar2) 
return utl.global.t_error_code;


end scheduler_gui;
-------------------------------------------------------------------------------
-- end of file
-------------------------------------------------------------------------------
/
